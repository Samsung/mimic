[

{
  "name": "Array.prototype.pop",
  "function": [
    "return Array.prototype.pop.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3,4]"
  ]
},

{
  "name": "Array.prototype.shift",
  "function": [
    "return Array.prototype.shift.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3,4,5]"
  ]
},

{
  "name": "Array.prototype.forEach",
  "function": [
    "return Array.prototype.forEach.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3], function f(e) { return 7; }, {}"
  ]
},

{
  "name": "Array.prototype.map",
  "function": [
    "return Array.prototype.map.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3,4], function f(e) { return e + 1; }"
  ]
},

{
  "name": "Array.prototype.every",
  "function": [
    "return Array.prototype.every.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[0,5,2,20,3,23], function f(e) { return e < 10; }, {}"
  ]
},

{
  "name": "Array.prototype.some",
  "function": [
    "return Array.prototype.some.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3], function f(e) { return e < 10; }, {}",
    "[1,2,3], function f(e) { return e > 10; }, {}"
  ]
},

{
  "name": "Array.prototype.reduce",
  "function": [
    "return Array.prototype.reduce.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3], function f(previousValue, currentValue, index, array) { return previousValue + currentValue; }, 0"
  ]
},

{
  "name": "Array.prototype.push",
  "function": [
    "return Array.prototype.push.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 2,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3], 4, 5, 6",
    "[1,2,3], 4",
    "[1,2,3], 4, 5, 6, 7"
  ]
},

{
  "name": "Array.prototype.reduceRight",
  "function": [
    "return Array.prototype.reduceRight.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 0,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3], function f(previousValue, currentValue, index, array) { return previousValue + currentValue; }, 0"
  ]
},

{
  "name": "Array.prototype.indexOf",
  "function": [
    "return Array.prototype.indexOf.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 1,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3,2], 2"
  ]
},

{
  "name": "Array.prototype.lastIndexOf",
  "function": [
    "return Array.prototype.lastIndexOf.apply(self, Array.prototype.slice.call(arguments, 1))"
  ],
  "loop": 1,
  "argnames": "self, arg0, arg1, arg2",
  "arguments": [
    "[1,2,3,2], 2"
  ]
},

{
  "name": "Array.handwritten.sum",
  "function": [
    "var result = 0; for (var i = 0; i < a.length; i++) result += a[i]; return result;"
  ],
  "loop": 1,
  "argnames": "a",
  "arguments": [
    "[4,5,6]",
    "[1,2,3]"
  ]
},

{
  "name": "Array.handwritten.max",
  "function": [
    "var result = -Infinity; for (var i = 0; i < a.length; i++) if (a[i] > result) result = a[i]; return result;"
  ],
  "loop": 1,
  "argnames": "a",
  "arguments": [
    "[4,5,6]",
    "[1,2,3]"
  ]
},

{
  "name": "Array.handwritten.min",
  "function": [
    "var result = Infinity; for (var i = 0; i < a.length; i++) if (a[i] < result) result = a[i]; return result;"
  ],
  "loop": 1,
  "argnames": "a",
  "arguments": [
    "[4,5,6]",
    "[1,2,3]"
  ]
}

]
